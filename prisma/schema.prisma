generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Existing User/Role/Permission Structure (unchanged)
model User {
  id               Int              @id @default(autoincrement())
  username         String           @unique
  email            String           @unique
  password         String
  firstName        String
  lastName         String
  image            String?
  phone            String?
  role             UserRole         @default(CUSTOMER)
  permissions      Permission[]     @relation("UserPermissions")
  status           UserStatus       @default(ACTIVE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  cart             CartItem[]
  orders           Order[]
  reviews          ProductReview[]
  addresses        UserAddress[]
  wishlist         WishlistItem[]
  loyaltyMember    LoyaltyMember[]
  blogPosts        BlogPost[]
  analyticsEvents  AnalyticsEvent[]
  auditLogs        AuditLog[]
  supportTickets   SupportTicket[]  @relation

  @@index([role])
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]   @relation("UserPermissions")
  roles       UserRole
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CONTENT_MGR
  INVENTORY_MGR
  CUSTOMER
  GUEST
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// Updated Product Model with Dynamic Fields
model Product {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?          @db.Text
  basePrice      Decimal          @db.Decimal(10, 2)
  salePrice      Decimal?         @db.Decimal(10, 2)
  sku            String           @unique
  slug           String           @unique
  productType    ProductType      @default(PHYSICAL)
  weight         Decimal?         @db.Decimal(8, 2)
  dimensions     String?
  stockQuantity  Int              @default(0)
  images         Json?
  status         ProductStatus    @default(DRAFT)
  isFeatured     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  variants       ProductVariant[]
  categories     Category[]       @relation("ProductCategories")
  tags           ProductTag[]     @relation("ProductTags")
  digitalProduct DigitalProduct?
  inventory      Inventory?
  orderItems     OrderItem[]
  reviews        ProductReview[]
  cartItems      CartItem[]
  wishlistItems  WishlistItem[]
  customFields   ProductField[] // New relation for dynamic field values
}

model ProductVariant {
  id         Int        @id @default(autoincrement())
  sku        String     @unique
  name       String
  price      Decimal    @db.Decimal(10, 2)
  stock      Int        @default(0)
  attributes Json
  product    Product    @relation(fields: [productId], references: [id])
  productId  Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  CartItem   CartItem[]
}

model DigitalProduct {
  id           Int       @id @default(autoincrement())
  fileUrl      String
  downloadKey  String    @unique
  maxDownloads Int       @default(3)
  expiryDate   DateTime?
  product      Product   @relation(fields: [productId], references: [id])
  productId    Int       @unique
  createdAt    DateTime  @default(now())
}

enum ProductType {
  PHYSICAL
  DIGITAL
  SERVICE
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum InstallationStatus {
  REQUESTED
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Installation {
  id                  Int                @id @default(autoincrement())
  serialNumber        String             @unique @default(uuid())
  userName            String
  mobileNumber        String
  alternateNumber     String?
  location            String
  city                String             @default("default-city")
  pincode             String             @default("000000")
  productSlugs        Json               @default("[]")
  state               String             @default("default-state")
  carBrand            String             @default("Unknown")
  carModel            String             @default("Unknown")
  carModelYear        Int
  referredDate        DateTime           @default(now())
  specialInstructions String?
  date                DateTime
  status              InstallationStatus @default(REQUESTED)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

enum TicketType {
  GENERAL
  WARRANTY
  TECHNICAL
}

model SupportTicket {
  id              Int            @id @default(autoincrement())
  type            TicketType     @default(GENERAL)
  submitterName   String
  submitterMobile String
  dateOfPurchase  DateTime?
  orderId         String?
  subject         String
  description     String         @db.Text
  status          TicketStatus   @default(OPEN)
  priority        TicketPriority @default(MEDIUM)
  userId          Int?
  user            User?          @relation(fields: [userId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Order {
  id              Int           @id @default(autoincrement())
  orderNumber     String        @unique
  totalAmount     Decimal       @db.Decimal(10, 2)
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(UNPAID)
  trackingNumber  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  shippingAddress Json
  billingAddress  Json
  items           OrderItem[]
  transactions    Transaction[]
  refunds         Refund[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  variant   Json?
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  createdAt DateTime @default(now())
}

enum OrderStatus {
  DRAFT
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
}

// 4. Payment & Shipping
model PaymentMethod {
  id           Int           @id @default(autoincrement())
  name         String
  provider     String
  isActive     Boolean       @default(true)
  config       Json
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Transaction {
  id            Int               @id @default(autoincrement())
  amount        Decimal           @db.Decimal(10, 2)
  currency      String
  status        TransactionStatus
  processorId   String?
  order         Order             @relation(fields: [orderId], references: [id])
  orderId       Int
  paymentMethod PaymentMethod     @relation(fields: [methodId], references: [id])
  methodId      Int
  createdAt     DateTime          @default(now())
}

enum TransactionStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

model ShippingMethod {
  id           Int      @id @default(autoincrement())
  name         String
  price        Decimal  @db.Decimal(10, 2)
  deliveryDays Int?
  isActive     Boolean  @default(true)
  countries    Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CartItem {
  id        Int             @id @default(autoincrement())
  quantity  Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    Int
  productId Int
  variantId Int? // Optional variant ID
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@index([productId])
  @@index([variantId])
}

model ProductReview {
  id         Int      @id @default(autoincrement())
  rating     Int
  reviewText String?  @db.Text
  createdAt  DateTime @default(now())
  productId  Int
  userId     Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
}

model UserAddress {
  id           Int     @id @default(autoincrement())
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean @default(false)
  userId       Int
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
}

model ProductTag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  products  Product[] @relation("ProductTags")
  createdAt DateTime  @default(now())
}

model LoyaltyTier {
  id             Int             @id @default(autoincrement())
  name           String
  pointsRequired Int
  benefits       String?
  programId      Int
  program        LoyaltyProgram  @relation(fields: [programId], references: [id], onDelete: Cascade)
  members        LoyaltyMember[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([programId])
}

// 5. Marketing & Analytics
model Campaign {
  id          Int            @id @default(autoincrement())
  name        String
  type        CampaignType
  status      CampaignStatus
  content     Json
  scheduledAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum CampaignType {
  EMAIL
  SMS
  SOCIAL
  PROMOTIONAL
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  COMPLETED
}

model AnalyticsEvent {
  id        Int      @id @default(autoincrement())
  eventType String
  sessionId String?
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

// 6. Content Management
model BlogPost {
  id            Int       @id @default(autoincrement())
  title         String
  slug          String    @unique
  content       String    @db.Text
  excerpt       String?
  featuredImage String?
  author        User      @relation(fields: [authorId], references: [id])
  authorId      Int
  seo           Json?
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 7. Loyalty & Support
model LoyaltyProgram {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean         @default(true)
  tiers       LoyaltyTier[]
  members     LoyaltyMember[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model LoyaltyMember {
  id        Int            @id @default(autoincrement())
  user      User           @relation(fields: [userId], references: [id])
  userId    Int            @unique
  program   LoyaltyProgram @relation(fields: [programId], references: [id])
  programId Int
  points    Int            @default(0)
  tier      LoyaltyTier?   @relation(fields: [tierId], references: [id])
  tierId    Int?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// 8. Audit & Security
model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  entity    String
  entityId  Int?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

// New ProductField Model to Store Dynamic Field Values
model ProductField {
  id              Int           @id @default(autoincrement())
  productId       Int
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  categoryFieldId Int
  categoryField   CategoryField @relation(fields: [categoryFieldId], references: [id], onDelete: Cascade)
  value           String // Store the value as a string (cast based on FieldType in app logic)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([productId])
  @@index([categoryFieldId])
}

// New CategoryField Model for Dynamic Fields
model CategoryField {
  id            Int            @id @default(autoincrement())
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name          String // e.g., "Wattage" for speakers
  type          FieldType // e.g., STRING, NUMBER, BOOLEAN
  isRequired    Boolean        @default(false)
  defaultValue  String? // Optional default value
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  productFields ProductField[] // Link to product-specific values

  @@index([categoryId])
}

enum FieldType {
  STRING
  NUMBER
  BOOLEAN
  TEXT
  DATE
}

// Updated Category Model
model Category {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  slug        String          @unique
  description String
  imageUrl    String
  parent      Category?       @relation("Subcategories", fields: [parentId], references: [id])
  parentId    Int?
  children    Category[]      @relation("Subcategories")
  products    Product[]       @relation("ProductCategories")
  fields      CategoryField[] // New relation to custom fields
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Inventory {
  id                Int      @id @default(autoincrement())
  quantity          Int
  warehouseLocation String?
  lastUpdated       DateTime @updatedAt
  product           Product  @relation(fields: [productId], references: [id])
  productId         Int      @unique
}

model Refund {
  id          Int      @id @default(autoincrement())
  amount      Decimal  @db.Decimal(10, 2)
  reason      String
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     Int
  processedAt DateTime @default(now())
  createdAt   DateTime @default(now())
}
